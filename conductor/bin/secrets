#!/bin/bash

param_password=""

_load_params() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
        -p)
            shift
            param_password=$1
            shift
            ;;
        *)
            shift
            ;;
        esac
    done
}

_load_params $*
# Recorre los parámetros y los clasifica en pre_params, password y post_params

# Imprime los parámetros antes y después de la contraseña
env_file=".secrets"
log() {
    local level="$1"
    local message="$2"
    local yellow="\033[1;33m"
    local red='\033[1;31m'
    local green='\033[1;32m'
    local reset="\033[0m"

    case "$level" in
    -w)
        echo -e "${yellow}[WARNING] $message${reset}"
        ;;
    -e)
        echo -e "${red}[ ERROR ] $message${reset}"
        ;;
    -i)
        echo "[INFO] $message"
        ;;
    -s)
        echo -e "${green}[SUCCESS] $message${reset}"
        ;;
    *)
        echo "$message"
        ;;
    esac
}

_to_b64() {
    local name=$1
    b64=$(base64 "./$name")
    echo "$name=$b64" >>"$env_file"
}

_find_file() {
    if [ -f "./$1" ]; then
        _to_b64 $1
    else
        log -w "El archivo '$1' no existe."
    fi
}

# **************** COMMANDS ******************

_build() {
    _verify
    # Limpiamos el .env
    echo "# SERVISOFTS Sercrets " >"$env_file"
    resultado=$(awk '/# SECRETS/{flag=1;next}/^#/{flag=0}flag' .gitignore)
    while IFS= read -r linea; do
        if [[ ! -z "$linea" ]]; then
            # echo "Procesando: $linea"
            _find_file $linea
        fi
    done <<<"$resultado"

    b64=$(base64 "./$env_file")
    echo "$b64" >"$env_file.base64"
    rm $env_file
    _cifrar
    rm "$env_file.base64"
    # echo $b64
    # echo -n "$value" | base64 -d > .env.base64

}
_unbuild() {
    # Check if the .env file exists

    _decifrar
    echo -n $(cat $env_file.base64) | base64 -d >./$env_file

    if [ -f "$env_file" ]; then
        # Read each line of the .env file
        while IFS= read -r line; do
            # Skip empty lines and comments
            if [[ -z "$line" || "$line" == "#"* ]]; then
                continue
            fi

            # Parse the key-value pair
            key=$(echo "$line" | awk -F '=' '{print $1}')
            # value=$(echo "$line" | awk -F '=' '{print $2}')

            awk_result=""
            value=$(awk -v cadena="$line" 'BEGIN{split(cadena, arr, "="); for (i=2; i<=length(arr); i++) awk_result = awk_result arr[i] "="; print awk_result}')

            # echo " "
            directorio=$(dirname "$key")
            mkdir -p "./$directorio"

            echo -n "$value" | base64 --decode >./$key
            echo "$key"
            # echo "res $value"

            # Export the environment variable
            # export "$key"="$value"
        done <"$env_file"
        rm $env_file
        # Display the environment variables
    else
        echo "No .env file found"
    fi
    rm $env_file.base64
    _verify
}

_clean() {
    echo "clean"
    # Limpiamos el .env
    resultado=$(awk '/# SECRETS/{flag=1;next}/^#/{flag=0}flag' .gitignore)
    while IFS= read -r linea; do
        if [[ ! -z "$linea" ]]; then
            echo "Procesando: $linea"
            if [ -f "./$linea" ]; then
                rm ./$linea
            fi
        fi
    done <<<"$resultado"
}

_verify() {
    # Limpiamos el .env
    resultado=$(awk '/# SECRETS/{flag=1;next}/^#/{flag=0}flag' .gitignore)
    while IFS= read -r linea; do
        if [[ ! -z "$linea" ]]; then
            # echo "Procesando: $linea"
            if [ -f "./$linea" ]; then
                log -s "[  LOAD  ] $linea"
            else
                log -e "[NOT LOAD] $linea"
            fi
        fi
    done <<<"$resultado"
}
_cifrar() {
    # plaintext="¡Hola, mundo!"
    # # Generar una clave aleatoria
    # key=$(openssl rand -hex 16)
    # # Cifrar el texto utilizando AES-256-CBC
    # ciphertext=$(echo -n "$plaintext" | openssl enc -aes-256-ecb -e -K "$key")
    # echo "Texto cifrado: $ciphertext"
    # echo "Clave: $key"
    INPUT_FILE="$env_file.base64"
    # El archivo de salida cifrado
    OUTPUT_FILE=$env_file-lock.base64
    # La contraseña para cifrar el archivo
    if [ -z "$param_password" ]; then
        PASSWORD=$(openssl rand -hex 16)
    else
        PASSWORD="$param_password"
    fi

    # Cifrar el archivo
    openssl enc -aes-256-cbc -salt -in "$INPUT_FILE" -out "$OUTPUT_FILE" -pass pass:$PASSWORD -md md5
    # openssl enc -aes-256-cbc -pass pass:$PASSWORD -d -p -in "$INPUT_FILE" -out "$OUTPUT_FILE"  -md md5
    echo $PASSWORD
}

_decifrar() {
    # echo "Texto descifrado: $plaintext"INPUT_FILE=archivo_cifrado.txt
    if [ -z "$param_password" ]; then
        log -e "Param required -p PASSWORD"
        exit 1
    fi

    OUTPUT_FILE="$env_file.base64"
    PASSWORD=$param_password
    openssl enc -d -aes-256-cbc -in "$env_file-lock.base64" -out "$OUTPUT_FILE" -pass pass:$PASSWORD -md md5
    # openssl enc -aes-256-cbc -d -in "$env_file-lock.base64" -out "$OUTPUT_FILE" -k $PASSWORD -md md5
    if [ $? -ne 0 ]; then
        log -e "Error: La contraseña proporcionada es incorrecta."
        rm $OUTPUT_FILE
        # log -s "Decode succesfull"
        exit 1
    fi
    log -s "Decode succesfull"

}

_backup() {
    _verify
    # Limpiamos el .env
    # echo "# SERVISOFTS Sercrets " >"$env_file"
    back_dir="secrets.backup"
    mkdir -p ./$back_dir
    resultado=$(awk '/# SECRETS/{flag=1;next}/^#/{flag=0}flag' .gitignore)
    while IFS= read -r linea; do
        if [[ ! -z "$linea" ]]; then
            # echo "Procesando: $linea"
            if [ -f "./$linea" ]; then
                directorio=$(dirname "$linea")
                mkdir -p ./$back_dir/$directorio
                cp "./$linea" "./$back_dir/$linea"
                # _to_b64 $linea
            else
                log -w "El archivo '$linea' no existe."
            fi
            # _find_file $linea
        fi
    done <<<"$resultado"

    # b64=$(base64 "./$env_file")
    # echo "$b64" >"$env_file.base64"
    # rm $env_file
    # _cifrar
    # rm "$env_file.base64"
}
_help() {
    echo ""
    echo "Usage: secrets <command>"
    echo ""
    echo "  build         Para compilar las secrets en un archibo de compilacion."
    echo "  unbuild       Para leer un archivo de compilacion y cargar las secrets en sus lugares."
    echo "  clean         Eliminar los secretos de el directorio."
    echo "  verify        Verifica que secretos se encuentran en el directorio."
    echo ""
    echo "secrets@1.0.1 Powered by Servisofts SRL"

}

case "$1" in
"build")
    _build
    exit 0
    ;;
"unbuild")
    _unbuild
    exit 0
    ;;
"install")
    _unbuild
    exit 0
    ;;
"clean")
    _clean
    exit 0
    ;;
"verify")
    _verify
    exit 0
    ;;
"test")
    _verify
    exit 0
    ;;
"decode")
    _decifrar
    exit 0
    ;;
"backup")
    _backup
    exit 0
    ;;
esac

_help
exit 0

echo "Script de gestions de secrets Servisofts"
